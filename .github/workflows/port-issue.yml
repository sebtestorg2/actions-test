name: Port issue

on:
  issue_comment:
    types:
      - created

jobs:
  port-issue:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '/backport') || contains(github.event.comment.body, '/forwardport')
    steps:
      - name: Check org membership
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if gh api orgs/${GITHUB_REPOSITORY_OWNER}/members | jq -e --arg GITHUB_ACTOR "$GITHUB_ACTOR" '.[] | select(.login == $GITHUB_ACTOR)' > /dev/null; then
              echo "${GITHUB_ACTOR} is a member"
              echo "is_member=true" >> $GITHUB_ENV
          else
              echo "${GITHUB_ACTOR} is not a member" >> $GITHUB_STEP_SUMMARY
              echo "is_member=false" >> $GITHUB_ENV
          fi
      - name: Check milestone
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          MILESTONE=$(echo "${COMMENT_BODY}" | awk '{ print $2 }')
          if gh api repos/${GITHUB_REPOSITORY}/milestones --paginate | jq -e --arg MILESTONE "$MILESTONE" '.[] | select(.title == $MILESTONE)' > /dev/null; then
              echo "Milestone exists"
           else
              echo "Milestone does not exist" >> $GITHUB_STEP_SUMMARY
              echo "milestone_exists=false" >> $GITHUB_ENV
           fi
      - name: Port issue
        if: ${{ env.is_member == 'true' }} && ${{ env.milestone_exists == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          ORIGINAL_ISSUE_NUMBER: ${{ github.event.issue.number }}
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          declare -a additional_cmd
          BODY=$(mktemp)
          ORIGINAL_ISSUE=$(gh issue view -R ${GITHUB_REPOSITORY} ${ORIGINAL_ISSUE_NUMBER} --json title,body)
          ORIGINAL_TITLE=$(echo "${ORIGINAL_ISSUE}" | jq -r .title)
          TYPE=$(echo "${COMMENT_BODY}" | awk '{ print $1 }' | sed -e 's_/__')
          MILESTONE=$(echo "${COMMENT_BODY}" | awk '{ print $2 }')
          ORIGINAL_LABELS=$(gh issue view -R ${GITHUB_REPOSITORY} ${ORIGINAL_ISSUE_NUMBER} --json labels --jq '[.labels[].name] | join(",")')
          if [ -n "$ORIGINAL_LABELS" ]; then
              additional_cmd+=("--label")
              additional_cmd+=("${ORIGINAL_LABELS}")
          fi
          if [ -n "$MILESTONE" ]; then
              echo "This is an automated request to port issue #${ORIGINAL_ISSUE_NUMBER} by @${GITHUB_ACTOR}" > $BODY
              echo "Original issue body:" >> $BODY
              echo "${ORIGINAL_ISSUE}" | jq -r .body >> $BODY
              NEW_ISSUE=$(gh issue create -R ${GITHUB_REPOSITORY} --title "[${TYPE}] ${ORIGINAL_TITLE}" --body-file $BODY -m $MILESTONE "${additional_cmd[@]}")
              echo "Port issue created: ${NEW_ISSUE}" >> $GITHUB_STEP_SUMMARY
          fi
